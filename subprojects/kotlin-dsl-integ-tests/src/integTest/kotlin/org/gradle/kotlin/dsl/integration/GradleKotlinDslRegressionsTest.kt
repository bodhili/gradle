/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.kotlin.dsl.integration

import org.gradle.util.internal.ToBeImplemented
import org.junit.Test
import spock.lang.Issue


class GradleKotlinDslRegressionsTest : AbstractPluginIntegrationTest() {

    @Test
    @Issue("https://github.com/gradle/gradle/issues/9919")
    fun `gradleKotlinDsl dependency declaration does not throw`() {

        withBuildScript(
            """
            plugins { java }
            dependencies {
                compileOnly(gradleKotlinDsl())
            }
            """
        )

        build("help")
    }

    @Test
    fun `can configure ext extension`() {
        withBuildScript(
            """
            ext {
                set("foo", "bar")
            }
            """
        )

        build("help")
    }

    @Test
    @Issue("https://youtrack.jetbrains.com/issue/KT-55068")
    @ToBeImplemented
    fun `kotlin ir backend issue kt-55068`() {

        assumeNonEmbeddedGradleExecuter()

        withDefaultSettingsIn("buildSrc")
        withBuildScriptIn("buildSrc", """
            plugins { `kotlin-dsl` }
            $repositoriesBlock
            afterEvaluate {
                kotlinDslPluginOptions {
                    tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
                        kotlinOptions.useOldBackend = false
                    }
                }
            }
        """)
        withFile("buildSrc/src/main/kotlin/my-plugin.gradle.kts", """
            data class Container(val property: Property<String> = objects.property())
        """)
        withBuildScript("""plugins { id("my-plugin") }""")

        executer.withStackTraceChecksDisabled()
        buildAndFail("help").run {
            assertHasFailure("Execution failed for task ':buildSrc:compileKotlin'.") {
                assertHasCause("Internal compiler error. See log for more details")
            }
            assertHasErrorOutput("Backend Internal error: Exception during IR lowering")
            assertHasErrorOutput("buildSrc/src/main/kotlin/my-plugin.gradle.kts")
        }
    }

    @Test
    @Issue("https://youtrack.jetbrains.com/issue/KT-55065")
    @ToBeImplemented
    fun `kotlin ir backend issue kt-55065`() {

        assumeNonEmbeddedGradleExecuter()

        withDefaultSettingsIn("buildSrc")
        withBuildScriptIn("buildSrc", """
            plugins { `kotlin-dsl` }
            $repositoriesBlock
            afterEvaluate {
                kotlinDslPluginOptions {
                    tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
                        kotlinOptions.useOldBackend = false
                    }
                }
            }
        """)
        withFile("buildSrc/src/main/kotlin/my-plugin.gradle.kts", """
            tasks.withType<DefaultTask>().configureEach {
                val p: String by project
            }
        """)
        withBuildScript("""plugins { id("my-plugin") }""")

        executer.withStackTraceChecksDisabled()
        buildAndFail("help").run {
            assertHasFailure("A problem occurred configuring root project") {
                assertHasCause("This class is an internal synthetic class generated by the Kotlin compiler, such as an anonymous class for a lambda, a SAM wrapper, a callable reference, etc. It's not a Kotlin class or interface, so the reflection library has no idea what declarations it has.")
            }
        }
    }
}
