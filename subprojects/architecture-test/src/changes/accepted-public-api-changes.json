{
    "acceptedApiChanges": [
        {
            "type": "org.gradle.api.AntBuilder",
            "member": "Class org.gradle.api.AntBuilder",
            "acceptation": "org.gradle.api.AntBuilder now extends groovy.ant.AntBuilder",
            "changes": [
                "Default method has been added in implemented interface"
            ]
        },
        {
            "type": "org.gradle.api.AntBuilder",
            "member": "Superclass [removed]",
            "acceptation": "org.gradle.api.AntBuilder now extends groovy.ant.AntBuilder",
            "changes": [
                "Superclass has been removed"
            ]
        },
        {
            "type": "org.gradle.api.DefaultTask",
            "member": "Class org.gradle.api.DefaultTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.ArtifactIdentifier",
            "member": "Method org.gradle.api.artifacts.ArtifactIdentifier.getClassifier()",
            "acceptation": "Method always could return null",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.ArtifactIdentifier",
            "member": "Method org.gradle.api.artifacts.ArtifactIdentifier.getExtension()",
            "acceptation": "Method always could return null",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.DependencyArtifact",
            "member": "Method org.gradle.api.artifacts.DependencyArtifact.getClassifier()",
            "acceptation": "Method always could return null",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.DependencyArtifact",
            "member": "Method org.gradle.api.artifacts.DependencyArtifact.getExtension()",
            "acceptation": "Method always could return null",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.DependencyArtifact",
            "member": "Method org.gradle.api.artifacts.DependencyArtifact.getUrl()",
            "acceptation": "Method always could return null",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.DependencySubstitutions$Substitution",
            "member": "Method org.gradle.api.artifacts.DependencySubstitutions$Substitution.with(org.gradle.api.artifacts.component.ComponentSelector)",
            "acceptation": "Deprecated method has been removed in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.ExternalDependency",
            "member": "Method org.gradle.api.artifacts.ExternalDependency.setForce(boolean)",
            "acceptation": "Removed deprecated components in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.ResolvedArtifact",
            "member": "Method org.gradle.api.artifacts.ResolvedArtifact.getExtension()",
            "acceptation": "Method always could return null",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.VersionCatalog",
            "member": "Method org.gradle.api.artifacts.VersionCatalog.findDependency(java.lang.String)",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.VersionCatalog",
            "member": "Method org.gradle.api.artifacts.VersionCatalog.getDependencyAliases()",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.dsl.DependencyHandler",
            "member": "Method org.gradle.api.artifacts.dsl.DependencyHandler.registerTransform(org.gradle.api.Action)",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.result.ResolvedComponentResult",
            "member": "Method org.gradle.api.artifacts.result.ResolvedComponentResult.getVariant()",
            "acceptation": "Deprecated method removed in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransform",
            "member": "Class org.gradle.api.artifacts.transform.ArtifactTransform",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Class has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransform",
            "member": "Constructor org.gradle.api.artifacts.transform.ArtifactTransform()",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Constructor has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransform",
            "member": "Method org.gradle.api.artifacts.transform.ArtifactTransform.getOutputDirectory()",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransform",
            "member": "Method org.gradle.api.artifacts.transform.ArtifactTransform.setOutputDirectory(java.io.File)",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransform",
            "member": "Method org.gradle.api.artifacts.transform.ArtifactTransform.transform(java.io.File)",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransformException",
            "member": "Class org.gradle.api.artifacts.transform.ArtifactTransformException",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Class has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransformException",
            "member": "Constructor org.gradle.api.artifacts.transform.ArtifactTransformException(java.io.File,org.gradle.api.attributes.AttributeContainer,java.lang.Class,java.lang.Throwable)",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Constructor has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransformException",
            "member": "Constructor org.gradle.api.artifacts.transform.ArtifactTransformException(java.io.File,org.gradle.api.attributes.AttributeContainer,java.lang.Throwable)",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Constructor has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.ArtifactTransformException",
            "member": "Constructor org.gradle.api.artifacts.transform.ArtifactTransformException(org.gradle.api.artifacts.component.ComponentArtifactIdentifier,org.gradle.api.attributes.AttributeContainer,java.lang.Throwable)",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Constructor has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.VariantTransform",
            "member": "Class org.gradle.api.artifacts.transform.VariantTransform",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Class has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.VariantTransform",
            "member": "Method org.gradle.api.artifacts.transform.VariantTransform.artifactTransform(java.lang.Class)",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.VariantTransform",
            "member": "Method org.gradle.api.artifacts.transform.VariantTransform.artifactTransform(java.lang.Class,org.gradle.api.Action)",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.VariantTransform",
            "member": "Method org.gradle.api.artifacts.transform.VariantTransform.getFrom()",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.artifacts.transform.VariantTransform",
            "member": "Method org.gradle.api.artifacts.transform.VariantTransform.getTo()",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.attributes.Usage",
            "member": "Field JAVA_API_CLASSES",
            "acceptation": "Removing deprecated fields for Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.api.attributes.Usage",
            "member": "Field JAVA_API_JARS",
            "acceptation": "Removing deprecated fields for Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.api.attributes.Usage",
            "member": "Field JAVA_RUNTIME_CLASSES",
            "acceptation": "Removing deprecated fields for Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.api.attributes.Usage",
            "member": "Field JAVA_RUNTIME_JARS",
            "acceptation": "Removing deprecated fields for Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.api.attributes.Usage",
            "member": "Field JAVA_RUNTIME_RESOURCES",
            "acceptation": "Removing deprecated fields for Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.api.distribution.plugins.DistributionPlugin",
            "member": "Class org.gradle.api.distribution.plugins.DistributionPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.file.SourceDirectorySet",
            "member": "Method org.gradle.api.file.SourceDirectorySet.getOutputDir()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.file.SourceDirectorySet",
            "member": "Method org.gradle.api.file.SourceDirectorySet.setOutputDir(java.io.File)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.file.SourceDirectorySet",
            "member": "Method org.gradle.api.file.SourceDirectorySet.setOutputDir(org.gradle.api.provider.Provider)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.initialization.dsl.VersionCatalogBuilder",
            "member": "Method org.gradle.api.initialization.dsl.VersionCatalogBuilder.alias(java.lang.String)",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.ApplicationPlugin",
            "member": "Class org.gradle.api.plugins.ApplicationPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.BasePlugin",
            "member": "Class org.gradle.api.plugins.BasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.GroovyBasePlugin",
            "member": "Class org.gradle.api.plugins.GroovyBasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.GroovyPlugin",
            "member": "Class org.gradle.api.plugins.GroovyPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.HelpTasksPlugin",
            "member": "Class org.gradle.api.plugins.HelpTasksPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaApplication",
            "member": "Method org.gradle.api.plugins.JavaApplication.getMainClassName()",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaApplication",
            "member": "Method org.gradle.api.plugins.JavaApplication.setMainClassName(java.lang.String)",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaBasePlugin",
            "member": "Class org.gradle.api.plugins.JavaBasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaBasePlugin",
            "member": "Method org.gradle.api.plugins.JavaBasePlugin.getJavaToolchainQueryService()",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaLibraryDistributionPlugin",
            "member": "Class org.gradle.api.plugins.JavaLibraryDistributionPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaLibraryPlugin",
            "member": "Class org.gradle.api.plugins.JavaLibraryPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaPlatformPlugin",
            "member": "Class org.gradle.api.plugins.JavaPlatformPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaPlugin",
            "member": "Class org.gradle.api.plugins.JavaPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JavaTestFixturesPlugin",
            "member": "Class org.gradle.api.plugins.JavaTestFixturesPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.JvmEcosystemPlugin",
            "member": "Class org.gradle.api.plugins.JvmEcosystemPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.ProjectReportsPlugin",
            "member": "Class org.gradle.api.plugins.ProjectReportsPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.ReportingBasePlugin",
            "member": "Class org.gradle.api.plugins.ReportingBasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.WarPlugin",
            "member": "Class org.gradle.api.plugins.WarPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.antlr.AntlrPlugin",
            "member": "Class org.gradle.api.plugins.antlr.AntlrPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory",
            "member": "Class org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory",
            "acceptation": "Removed deprecated class in Gradle 8.0",
            "changes": [
                "Class has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory",
            "member": "Field NAME",
            "acceptation": "Removed deprecated field in Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory",
            "member": "Method org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory.antlr(groovy.lang.Closure)",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory",
            "member": "Method org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory.antlr(org.gradle.api.Action)",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory",
            "member": "Method org.gradle.api.plugins.antlr.AntlrSourceVirtualDirectory.getAntlr()",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.antlr.AntlrTask",
            "member": "Class org.gradle.api.plugins.antlr.AntlrTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.catalog.VersionCatalogPlugin",
            "member": "Class org.gradle.api.plugins.catalog.VersionCatalogPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.Checkstyle",
            "member": "Class org.gradle.api.plugins.quality.Checkstyle",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.Checkstyle",
            "member": "Method org.gradle.api.plugins.quality.Checkstyle.getAntBuilder()",
            "acceptation": "Deprecated method removed in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.CheckstyleExtension",
            "member": "Class org.gradle.api.plugins.quality.CheckstyleExtension",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.CheckstylePlugin",
            "member": "Class org.gradle.api.plugins.quality.CheckstylePlugin",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin.getJavaPluginConvention()"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.CodeNarc",
            "member": "Class org.gradle.api.plugins.quality.CodeNarc",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.CodeNarc",
            "member": "Method org.gradle.api.plugins.quality.CodeNarc.getAntBuilder()",
            "acceptation": "Deprecated method removed in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.CodeNarcExtension",
            "member": "Class org.gradle.api.plugins.quality.CodeNarcExtension",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.CodeNarcPlugin",
            "member": "Class org.gradle.api.plugins.quality.CodeNarcPlugin",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin.getJavaPluginConvention()"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.Pmd",
            "member": "Class org.gradle.api.plugins.quality.Pmd",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.Pmd",
            "member": "Method org.gradle.api.plugins.quality.Pmd.getAntBuilder()",
            "acceptation": "Deprecated method removed in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.PmdExtension",
            "member": "Class org.gradle.api.plugins.quality.PmdExtension",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.quality.PmdPlugin",
            "member": "Class org.gradle.api.plugins.quality.PmdPlugin",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin.getJavaPluginConvention()"
            ]
        },
        {
            "type": "org.gradle.api.plugins.scala.ScalaBasePlugin",
            "member": "Class org.gradle.api.plugins.scala.ScalaBasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.plugins.scala.ScalaPlugin",
            "member": "Class org.gradle.api.plugins.scala.ScalaPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.ivy.plugins.IvyPublishPlugin",
            "member": "Class org.gradle.api.publish.ivy.plugins.IvyPublishPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor",
            "member": "Class org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository",
            "member": "Class org.gradle.api.publish.ivy.tasks.PublishToIvyRepository",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.maven.plugins.MavenPublishPlugin",
            "member": "Class org.gradle.api.publish.maven.plugins.MavenPublishPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.maven.tasks.GenerateMavenPom",
            "member": "Class org.gradle.api.publish.maven.tasks.GenerateMavenPom",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.maven.tasks.PublishToMavenLocal",
            "member": "Class org.gradle.api.publish.maven.tasks.PublishToMavenLocal",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.maven.tasks.PublishToMavenRepository",
            "member": "Class org.gradle.api.publish.maven.tasks.PublishToMavenRepository",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.plugins.PublishingPlugin",
            "member": "Class org.gradle.api.publish.plugins.PublishingPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.publish.tasks.GenerateModuleMetadata",
            "member": "Class org.gradle.api.publish.tasks.GenerateModuleMetadata",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.reporting.ConfigurableReport",
            "member": "Method org.gradle.api.reporting.ConfigurableReport.setDestination(org.gradle.api.provider.Provider)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.reporting.ConfigurableReport",
            "member": "Method org.gradle.api.reporting.ConfigurableReport.setEnabled(org.gradle.api.provider.Provider)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.reporting.GenerateBuildDashboard",
            "member": "Class org.gradle.api.reporting.GenerateBuildDashboard",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.reporting.Report",
            "member": "Method org.gradle.api.reporting.Report.getDestination()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.reporting.Report",
            "member": "Method org.gradle.api.reporting.Report.isEnabled()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.reporting.Report",
            "member": "Method org.gradle.api.reporting.Report.setEnabled(boolean)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.reporting.ReportingExtension",
            "member": "Class org.gradle.api.reporting.ReportingExtension",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.reporting.components.ComponentReport",
            "member": "Class org.gradle.api.reporting.components.ComponentReport",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.reporting.dependencies.HtmlDependencyReportTask",
            "member": "Class org.gradle.api.reporting.dependencies.HtmlDependencyReportTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.reporting.dependents.DependentComponentsReport",
            "member": "Class org.gradle.api.reporting.dependents.DependentComponentsReport",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.reporting.model.ModelReport",
            "member": "Class org.gradle.api.reporting.model.ModelReport",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.reporting.plugins.BuildDashboardPlugin",
            "member": "Class org.gradle.api.reporting.plugins.BuildDashboardPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.AbstractExecTask",
            "member": "Method org.gradle.api.tasks.AbstractExecTask.getExecResult()",
            "acceptation": "Removed for Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Copy",
            "member": "Class org.gradle.api.tasks.Copy",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Delete",
            "member": "Class org.gradle.api.tasks.Delete",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.GradleBuild",
            "member": "Class org.gradle.api.tasks.GradleBuild",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.GroovyRuntime",
            "member": "Class org.gradle.api.tasks.GroovyRuntime",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.JavaExec",
            "member": "Class org.gradle.api.tasks.JavaExec",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.JavaExec",
            "member": "Method org.gradle.api.tasks.JavaExec.setMain(java.lang.String)",
            "acceptation": "Removed for Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.ScalaRuntime",
            "member": "Class org.gradle.api.tasks.ScalaRuntime",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.SourceTask",
            "member": "Class org.gradle.api.tasks.SourceTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Sync",
            "member": "Class org.gradle.api.tasks.Sync",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Upload",
            "member": "Class org.gradle.api.tasks.Upload",
            "acceptation": "Class was previously deprecated and is being removed in Gradle 8.0",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Upload",
            "member": "Method org.gradle.api.tasks.Upload.getConfiguration()",
            "acceptation": "Class to be removed, functionality deleted",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Upload",
            "member": "Method org.gradle.api.tasks.Upload.getDescriptorDestination()",
            "acceptation": "Class to be removed, functionality deleted",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Upload",
            "member": "Method org.gradle.api.tasks.Upload.getPublicationServices()",
            "acceptation": "Class to be removed, functionality deleted",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Upload",
            "member": "Method org.gradle.api.tasks.Upload.getRepositories()",
            "acceptation": "Class to be removed, functionality deleted",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Upload",
            "member": "Method org.gradle.api.tasks.Upload.repositories(groovy.lang.Closure)",
            "acceptation": "Class to be removed, functionality deleted",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.tasks.Upload",
            "member": "Method org.gradle.api.tasks.Upload.repositories(org.gradle.api.Action)",
            "acceptation": "Class to be removed, functionality deleted",
            "changes": [
                "From non-null returning to null returning breaking change"
            ]
        },
        {
            "type": "org.gradle.api.tasks.WriteProperties",
            "member": "Class org.gradle.api.tasks.WriteProperties",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.ant.AntTarget",
            "member": "Class org.gradle.api.tasks.ant.AntTarget",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.application.CreateStartScripts",
            "member": "Class org.gradle.api.tasks.application.CreateStartScripts",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.getAppendix()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.getArchiveName()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.getBaseName()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.getClassifier()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.getDestinationDir()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.getExtension()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.getVersion()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.setAppendix(java.lang.String)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.setArchiveName(java.lang.String)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.setBaseName(java.lang.String)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.setClassifier(java.lang.String)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.setDestinationDir(java.io.File)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.setExtension(java.lang.String)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.bundling.AbstractArchiveTask",
            "member": "Method org.gradle.api.tasks.bundling.AbstractArchiveTask.setVersion(java.lang.String)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.CompileOptions",
            "member": "Class org.gradle.api.tasks.compile.CompileOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.ForkOptions",
            "member": "Class org.gradle.api.tasks.compile.ForkOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.GroovyCompile",
            "member": "Class org.gradle.api.tasks.compile.GroovyCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.GroovyCompile",
            "member": "Method org.gradle.api.tasks.compile.GroovyCompile.getFeaturePreviews()",
            "acceptation": "Changed type of injected property",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.GroovyCompileOptions",
            "member": "Class org.gradle.api.tasks.compile.GroovyCompileOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.GroovyForkOptions",
            "member": "Class org.gradle.api.tasks.compile.GroovyForkOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.compile.JavaCompile",
            "member": "Class org.gradle.api.tasks.compile.JavaCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask",
            "member": "Class org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.diagnostics.DependencyInsightReportTask",
            "member": "Class org.gradle.api.tasks.diagnostics.DependencyInsightReportTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.diagnostics.DependencyInsightReportTask",
            "member": "Method org.gradle.api.tasks.diagnostics.DependencyInsightReportTask.setLegacyShowSinglePathToDependency(boolean)",
            "acceptation": "Deprecated method removed in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.diagnostics.DependencyReportTask",
            "member": "Class org.gradle.api.tasks.diagnostics.DependencyReportTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.diagnostics.ProjectReportTask",
            "member": "Class org.gradle.api.tasks.diagnostics.ProjectReportTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.diagnostics.PropertyReportTask",
            "member": "Class org.gradle.api.tasks.diagnostics.PropertyReportTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.diagnostics.TaskReportTask",
            "member": "Class org.gradle.api.tasks.diagnostics.TaskReportTask",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.incremental.IncrementalTaskInputs",
            "member": "Class org.gradle.api.tasks.incremental.IncrementalTaskInputs",
            "acceptation": "Removed with 8.0",
            "changes": [
                "Class has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.incremental.IncrementalTaskInputs",
            "member": "Method org.gradle.api.tasks.incremental.IncrementalTaskInputs.isIncremental()",
            "acceptation": "Removed IncrementalTaskInputs with 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.incremental.IncrementalTaskInputs",
            "member": "Method org.gradle.api.tasks.incremental.IncrementalTaskInputs.outOfDate(org.gradle.api.Action)",
            "acceptation": "Removed IncrementalTaskInputs with 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.incremental.IncrementalTaskInputs",
            "member": "Method org.gradle.api.tasks.incremental.IncrementalTaskInputs.removed(org.gradle.api.Action)",
            "acceptation": "Removed IncrementalTaskInputs with 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.javadoc.Groovydoc",
            "member": "Class org.gradle.api.tasks.javadoc.Groovydoc",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.javadoc.Groovydoc",
            "member": "Method org.gradle.api.tasks.javadoc.Groovydoc.isIncludePrivate()",
            "acceptation": "Deprecated method removed in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.javadoc.Groovydoc",
            "member": "Method org.gradle.api.tasks.javadoc.Groovydoc.setIncludePrivate(boolean)",
            "acceptation": "Deprecated method removed in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.javadoc.Javadoc",
            "member": "Class org.gradle.api.tasks.javadoc.Javadoc",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.javadoc.Javadoc",
            "member": "Method org.gradle.api.tasks.javadoc.Javadoc.getExecActionFactory()",
            "acceptation": "Removed unused injected property with 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.scala.IncrementalCompileOptions",
            "member": "Class org.gradle.api.tasks.scala.IncrementalCompileOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.scala.ScalaCompile",
            "member": "Class org.gradle.api.tasks.scala.ScalaCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.scala.ScalaCompileOptions",
            "member": "Class org.gradle.api.tasks.scala.ScalaCompileOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.scala.ScalaDoc",
            "member": "Class org.gradle.api.tasks.scala.ScalaDoc",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.scala.ScalaDocOptions",
            "member": "Class org.gradle.api.tasks.scala.ScalaDocOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.scala.ScalaForkOptions",
            "member": "Class org.gradle.api.tasks.scala.ScalaForkOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.AbstractTestTask",
            "member": "Method org.gradle.api.tasks.testing.AbstractTestTask.getBinResultsDir()",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.AbstractTestTask",
            "member": "Method org.gradle.api.tasks.testing.AbstractTestTask.setBinResultsDir(java.io.File)",
            "acceptation": "Deprecated method removed",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.TestReport",
            "member": "Class org.gradle.api.tasks.testing.TestReport",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.TestReport",
            "member": "Method org.gradle.api.tasks.testing.TestReport.getTestResultDirs()",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.TestReport",
            "member": "Method org.gradle.api.tasks.testing.TestReport.setTestResultDirs(java.lang.Iterable)",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.junit.JUnitOptions",
            "member": "Method org.gradle.api.tasks.testing.junit.JUnitOptions.copyFrom(org.gradle.api.tasks.testing.junit.JUnitOptions)",
            "acceptation": "JUnitOptions offers being copied in Gradle 8.0",
            "changes": [
                "Method added to public class"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions",
            "member": "Method org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions.copyFrom(org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions)",
            "acceptation": "JUnitPlatformOptions offers being copied in Gradle 8.0",
            "changes": [
                "Method added to public class"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.testng.TestNGOptions",
            "member": "Class org.gradle.api.tasks.testing.testng.TestNGOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.api.tasks.testing.testng.TestNGOptions",
            "member": "Method org.gradle.api.tasks.testing.testng.TestNGOptions.copyFrom(org.gradle.api.tasks.testing.testng.TestNGOptions)",
            "acceptation": "TestNGOptions offers being copied in Gradle 8.0",
            "changes": [
                "Method added to public class"
            ]
        },
        {
            "type": "org.gradle.api.tasks.wrapper.Wrapper",
            "member": "Class org.gradle.api.tasks.wrapper.Wrapper",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.buildinit.plugins.BuildInitPlugin",
            "member": "Class org.gradle.buildinit.plugins.BuildInitPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.buildinit.plugins.WrapperPlugin",
            "member": "Class org.gradle.buildinit.plugins.WrapperPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.buildinit.tasks.InitBuild",
            "member": "Class org.gradle.buildinit.tasks.InitBuild",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.caching.http.HttpBuildCache",
            "member": "Class org.gradle.caching.http.HttpBuildCache",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.caching.local.DirectoryBuildCache",
            "member": "Class org.gradle.caching.local.DirectoryBuildCache",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin",
            "member": "Class org.gradle.ide.visualstudio.plugins.VisualStudioPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.ide.xcode.plugins.XcodePlugin",
            "member": "Class org.gradle.ide.xcode.plugins.XcodePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.jvm.application.tasks.CreateStartScripts",
            "member": "Class org.gradle.jvm.application.tasks.CreateStartScripts",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.ClientModuleScope",
            "member": "Class org.gradle.kotlin.dsl.ClientModuleScope",
            "acceptation": "Removed deprecated components in Gradle 8.0",
            "changes": [
                "org.gradle.kotlin.dsl.support.delegates.ClientModuleDelegate.setForce(boolean)"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.ConfigurationDeprecatedExtensionsKt",
            "member": "Method org.gradle.kotlin.dsl.ConfigurationDeprecatedExtensionsKt.getUploadTaskName$annotations(org.gradle.api.NamedDomainObjectProvider)",
            "acceptation": "Class to be removed, functionality deleted",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.ConfigurationDeprecatedExtensionsKt",
            "member": "Method org.gradle.kotlin.dsl.ConfigurationDeprecatedExtensionsKt.getUploadTaskName(org.gradle.api.NamedDomainObjectProvider)",
            "acceptation": "Class to be removed, functionality deleted",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.DependenciesExtensionsKt",
            "member": "Method org.gradle.kotlin.dsl.DependenciesExtensionsKt.invoke(org.gradle.api.artifacts.dsl.DependencyAdder,org.gradle.api.artifacts.Dependency,org.gradle.api.Action)",
            "acceptation": "binary compatibilty check is confused",
            "changes": [
                "Method added to public class"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.DependenciesExtensionsKt",
            "member": "Method org.gradle.kotlin.dsl.DependenciesExtensionsKt.invoke(org.gradle.api.artifacts.dsl.DependencyModifier,org.gradle.api.artifacts.ModuleDependency)",
            "acceptation": "binary compatibilty check is confused",
            "changes": [
                "Method added to public class"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.DependenciesExtensionsKt",
            "member": "Method org.gradle.kotlin.dsl.DependenciesExtensionsKt.module(org.gradle.api.artifacts.dsl.Dependencies,java.lang.String,java.lang.String,java.lang.String)",
            "acceptation": "binary compatibilty check is confused",
            "changes": [
                "Method added to public class"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.DependencyHandlerScope",
            "member": "Class org.gradle.kotlin.dsl.DependencyHandlerScope",
            "acceptation": "Legacy ArtifactTransform API has been removed",
            "changes": [
                "org.gradle.kotlin.dsl.support.delegates.DependencyHandlerDelegate.registerTransform(org.gradle.api.Action)"
            ]
        },
        {
            "type": "org.gradle.kotlin.dsl.NamedDomainObjectContainerExtensionsKt",
            "member": "Method org.gradle.kotlin.dsl.NamedDomainObjectContainerExtensionsKt.invoke(org.gradle.api.NamedDomainObjectContainer,kotlin.jvm.functions.Function1)",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.language.base.plugins.LifecycleBasePlugin",
            "member": "Class org.gradle.language.base.plugins.LifecycleBasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.c.tasks.CPreCompiledHeaderCompile",
            "member": "Class org.gradle.language.c.tasks.CPreCompiledHeaderCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.cpp.plugins.CppApplicationPlugin",
            "member": "Class org.gradle.language.cpp.plugins.CppApplicationPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.cpp.plugins.CppBasePlugin",
            "member": "Class org.gradle.language.cpp.plugins.CppBasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.cpp.plugins.CppLibraryPlugin",
            "member": "Class org.gradle.language.cpp.plugins.CppLibraryPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.cpp.tasks.CppCompile",
            "member": "Class org.gradle.language.cpp.tasks.CppCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.cpp.tasks.CppPreCompiledHeaderCompile",
            "member": "Class org.gradle.language.cpp.tasks.CppPreCompiledHeaderCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.jvm.tasks.ProcessResources",
            "member": "Class org.gradle.language.jvm.tasks.ProcessResources",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.nativeplatform.tasks.UnexportMainSymbol",
            "member": "Class org.gradle.language.nativeplatform.tasks.UnexportMainSymbol",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.objectivec.tasks.ObjectiveCPreCompiledHeaderCompile",
            "member": "Class org.gradle.language.objectivec.tasks.ObjectiveCPreCompiledHeaderCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.objectivecpp.tasks.ObjectiveCppPreCompiledHeaderCompile",
            "member": "Class org.gradle.language.objectivecpp.tasks.ObjectiveCppPreCompiledHeaderCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.scala.tasks.BaseScalaCompileOptions",
            "member": "Class org.gradle.language.scala.tasks.BaseScalaCompileOptions",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.swift.plugins.SwiftApplicationPlugin",
            "member": "Class org.gradle.language.swift.plugins.SwiftApplicationPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.swift.plugins.SwiftBasePlugin",
            "member": "Class org.gradle.language.swift.plugins.SwiftBasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.swift.plugins.SwiftLibraryPlugin",
            "member": "Class org.gradle.language.swift.plugins.SwiftLibraryPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.language.swift.tasks.SwiftCompile",
            "member": "Class org.gradle.language.swift.tasks.SwiftCompile",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.CreateStaticLibrary",
            "member": "Class org.gradle.nativeplatform.tasks.CreateStaticLibrary",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.ExtractSymbols",
            "member": "Class org.gradle.nativeplatform.tasks.ExtractSymbols",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.InstallExecutable",
            "member": "Class org.gradle.nativeplatform.tasks.InstallExecutable",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.LinkExecutable",
            "member": "Class org.gradle.nativeplatform.tasks.LinkExecutable",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.LinkMachOBundle",
            "member": "Class org.gradle.nativeplatform.tasks.LinkMachOBundle",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.LinkSharedLibrary",
            "member": "Class org.gradle.nativeplatform.tasks.LinkSharedLibrary",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.tasks.StripSymbols",
            "member": "Class org.gradle.nativeplatform.tasks.StripSymbols",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.test.cpp.plugins.CppUnitTestPlugin",
            "member": "Class org.gradle.nativeplatform.test.cpp.plugins.CppUnitTestPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.test.cunit.tasks.GenerateCUnitLauncher",
            "member": "Class org.gradle.nativeplatform.test.cunit.tasks.GenerateCUnitLauncher",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin",
            "member": "Class org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle",
            "member": "Class org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension",
            "member": "Class org.gradle.plugin.devel.GradlePluginDevelopmentExtension",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin",
            "member": "Class org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors",
            "member": "Class org.gradle.plugin.devel.tasks.GeneratePluginDescriptors",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata",
            "member": "Class org.gradle.plugin.devel.tasks.PluginUnderTestMetadata",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ear.EarPlugin",
            "member": "Class org.gradle.plugins.ear.EarPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.EclipsePlugin",
            "member": "Class org.gradle.plugins.ide.eclipse.EclipsePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.EclipseWtpPlugin",
            "member": "Class org.gradle.plugins.ide.eclipse.EclipseWtpPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.GenerateEclipseClasspath",
            "member": "Class org.gradle.plugins.ide.eclipse.GenerateEclipseClasspath",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.GenerateEclipseJdt",
            "member": "Class org.gradle.plugins.ide.eclipse.GenerateEclipseJdt",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.GenerateEclipseProject",
            "member": "Class org.gradle.plugins.ide.eclipse.GenerateEclipseProject",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.GenerateEclipseWtpComponent",
            "member": "Class org.gradle.plugins.ide.eclipse.GenerateEclipseWtpComponent",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.GenerateEclipseWtpFacet",
            "member": "Class org.gradle.plugins.ide.eclipse.GenerateEclipseWtpFacet",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.model.EclipseClasspath",
            "member": "Class org.gradle.plugins.ide.eclipse.model.EclipseClasspath",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.model.EclipseJdt",
            "member": "Class org.gradle.plugins.ide.eclipse.model.EclipseJdt",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.model.EclipseModel",
            "member": "Class org.gradle.plugins.ide.eclipse.model.EclipseModel",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.model.EclipseProject",
            "member": "Class org.gradle.plugins.ide.eclipse.model.EclipseProject",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.model.EclipseWtp",
            "member": "Class org.gradle.plugins.ide.eclipse.model.EclipseWtp",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent",
            "member": "Class org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet",
            "member": "Class org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.idea.GenerateIdeaModule",
            "member": "Class org.gradle.plugins.ide.idea.GenerateIdeaModule",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.idea.GenerateIdeaProject",
            "member": "Class org.gradle.plugins.ide.idea.GenerateIdeaProject",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.idea.GenerateIdeaWorkspace",
            "member": "Class org.gradle.plugins.ide.idea.GenerateIdeaWorkspace",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.idea.IdeaPlugin",
            "member": "Class org.gradle.plugins.ide.idea.IdeaPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.idea.model.IdeaModel",
            "member": "Class org.gradle.plugins.ide.idea.model.IdeaModel",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.idea.model.IdeaModule",
            "member": "Class org.gradle.plugins.ide.idea.model.IdeaModule",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.idea.model.IdeaProject",
            "member": "Class org.gradle.plugins.ide.idea.model.IdeaProject",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.ide.idea.model.IdeaWorkspace",
            "member": "Class org.gradle.plugins.ide.idea.model.IdeaWorkspace",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.signing.Sign",
            "member": "Class org.gradle.plugins.signing.Sign",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.signing.SigningExtension",
            "member": "Class org.gradle.plugins.signing.SigningExtension",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.plugins.signing.SigningPlugin",
            "member": "Class org.gradle.plugins.signing.SigningPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.process.JavaExecSpec",
            "member": "Method org.gradle.process.JavaExecSpec.getMain()",
            "acceptation": "Removed for Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.process.JavaExecSpec",
            "member": "Method org.gradle.process.JavaExecSpec.setMain(java.lang.String)",
            "acceptation": "Default implementation added to spec for Gradle 8.0",
            "changes": [
                "Abstract method is now default method"
            ]
        },
        {
            "type": "org.gradle.swiftpm.plugins.SwiftPackageManagerExportPlugin",
            "member": "Class org.gradle.swiftpm.plugins.SwiftPackageManagerExportPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.swiftpm.tasks.GenerateSwiftPackageManagerManifest",
            "member": "Class org.gradle.swiftpm.tasks.GenerateSwiftPackageManagerManifest",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.testing.base.plugins.TestingBasePlugin",
            "member": "Class org.gradle.testing.base.plugins.TestingBasePlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.plugins.JacocoPlugin",
            "member": "Class org.gradle.testing.jacoco.plugins.JacocoPlugin",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension",
            "member": "Class org.gradle.testing.jacoco.plugins.JacocoPluginExtension",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension",
            "member": "Field project",
            "acceptation": "Removing deprecated field in Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension",
            "member": "Method org.gradle.testing.jacoco.plugins.JacocoPluginExtension.getReportsDir()",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension",
            "member": "Method org.gradle.testing.jacoco.plugins.JacocoPluginExtension.setReportsDir(java.io.File)",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension",
            "member": "Method org.gradle.testing.jacoco.plugins.JacocoPluginExtension.setReportsDir(org.gradle.api.provider.Provider)",
            "acceptation": "Removing deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension",
            "member": "Class org.gradle.testing.jacoco.plugins.JacocoTaskExtension",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoCoverageVerification",
            "member": "Class org.gradle.testing.jacoco.tasks.JacocoCoverageVerification",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Class org.gradle.testing.jacoco.tasks.JacocoMerge",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Class has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Constructor org.gradle.testing.jacoco.tasks.JacocoMerge()",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Constructor has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.executionData(java.lang.Object[])",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.executionData(org.gradle.api.Task[])",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.executionData(org.gradle.api.tasks.TaskCollection)",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.getAntBuilder()",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.getDestinationFile()",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.getExecutionData()",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.merge()",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.setDestinationFile(java.io.File)",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.setDestinationFile(org.gradle.api.provider.Provider)",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoMerge",
            "member": "Method org.gradle.testing.jacoco.tasks.JacocoMerge.setExecutionData(org.gradle.api.file.FileCollection)",
            "acceptation": "Removing deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.testing.jacoco.tasks.JacocoReport",
            "member": "Class org.gradle.testing.jacoco.tasks.JacocoReport",
            "acceptation": "making this class abstract makes it easier to remove boilerplate",
            "changes": [
                "Class is now abstract"
            ]
        },
        {
            "type": "org.gradle.workers.ForkMode",
            "member": "Class org.gradle.workers.ForkMode",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Class has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.ForkMode",
            "member": "Field ALWAYS",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.ForkMode",
            "member": "Field AUTO",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.ForkMode",
            "member": "Field NEVER",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Field has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.ForkMode",
            "member": "Method org.gradle.workers.ForkMode.valueOf(java.lang.String)",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.ForkMode",
            "member": "Method org.gradle.workers.ForkMode.values()",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Class org.gradle.workers.WorkerConfiguration",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Class has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Method org.gradle.workers.WorkerConfiguration.classpath(java.lang.Iterable)",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Method org.gradle.workers.WorkerConfiguration.getClasspath()",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Method org.gradle.workers.WorkerConfiguration.getForkMode()",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Method org.gradle.workers.WorkerConfiguration.getIsolationMode()",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Method org.gradle.workers.WorkerConfiguration.setClasspath(java.lang.Iterable)",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Method org.gradle.workers.WorkerConfiguration.setDisplayName(java.lang.String)",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Method org.gradle.workers.WorkerConfiguration.setForkMode(org.gradle.workers.ForkMode)",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerConfiguration",
            "member": "Method org.gradle.workers.WorkerConfiguration.setIsolationMode(org.gradle.workers.IsolationMode)",
            "acceptation": "Remove deprecated class in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        },
        {
            "type": "org.gradle.workers.WorkerExecutor",
            "member": "Method org.gradle.workers.WorkerExecutor.submit(java.lang.Class,org.gradle.api.Action)",
            "acceptation": "Removed deprecated method in Gradle 8.0",
            "changes": [
                "Method has been removed"
            ]
        }
    ]
}
